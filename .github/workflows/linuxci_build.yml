on:
  workflow_dispatch:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    name: Build Dolphin for x86_64
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Git submodules
        id: cache-submodules
        uses: actions/cache@v4
        with:
          path: |
            ./.git/modules        
            ./Externals/**/*
          key: ${{ runner.os }}-dolphin-submodules-${{ hashFiles('**/.gitmodules') }}
          restore-keys: |
            ${{ runner.os }}-dolphin-submodules-

      - name: Initialize and update submodules
        if: steps.cache-submodules.outputs.cache-hit != 'true'
        run: |
          git -c submodule."Externals/Qt".update=none \
          -c submodule."Externals/FFmpeg-bin".update=none \
          -c submodule."Externals/libadrenotools".update=none \
          submodule update --init --recursive \
          && git pull --recurse-submodules

      - name: Cache ccache directory
        id: cache-ccache
        uses: actions/cache@v4
        with:
          path: .ccache
          key: ${{ runner.os }}-ccache-${{ hashFiles('CMakeLists.txt', '**/CMakeLists.txt', '**/*.cpp', '**/*.h') }}
          restore-keys: |
            ${{ runner.os }}-ccache-

      - name: Docker for Arch
        run: |
          docker pull archlinux:base-devel
          docker run --rm \
            -v $GITHUB_WORKSPACE:/workspace \
            -v $GITHUB_WORKSPACE/.ccache:/workspace/.ccache \
            -w /workspace \
            -e CCACHE_DIR=/workspace/.ccache \
            archlinux:base-devel bash -c "
            
              # Update and install necessary packages
              pacman -Syu --noconfirm && pacman -S --noconfirm \
                cmake ninja ffmpeg libxrandr libxi libevdev alsa-lib qt6-base qt6-svg ccache minizip &&
                # bluez pango cairo pulseaudio mesa\
              
              # Set up build and output directories
              build_path='./build'
              out_path='./out'
              mkdir -p \$build_path \$out_path

              # Run cmake configuration
              cmake -S . -B \$build_path \
                -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_INSTALL_PREFIX=\$out_path \
                -DCMAKE_CXX_FLAGS=-march=x86-64 \
                -DCMAKE_C_FLAGS=-march=x86-64 \
                -DCMAKE_C_COMPILER="gcc" \
                -DCMAKE_CXX_COMPILER="g++" \
                -DENABLE_ANALYTICS=OFF \
                -DENABLE_AUTOUPDATE=OFF \
                -DENABLE_BLUEZ=OFF \
                -DENABLE_TESTS=OFF \
                -DLINUX_LOCAL_DEV=ON \
                -DUSE_DISCORD_PRESENCE=OFF \
                -DUSE_RETRO_ACHIEVEMENTS=OFF \
                -DUSE_SYSTEM_LIBS=OFF \
                -GNinja

              # Build with Ninja
              ninja -C \$build_path && ninja -C \$build_path install

              # Mark the build as portable
              touch \$out_path/bin/portable.txt
              mv \$out_path/share/dolphin-emu \$out_path
              mv \$out_path/dolphin-emu/sys \$out_path/dolphin-emu/Sys # Case sensitivity fix for installation
              mv \$out_path/bin/* \$out_path/dolphin-emu/
              rmdir \$out_path/bin
              
            "
            
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: dolphin-artifact
          path: ./out/
