on:
  workflow_dispatch:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    name: Build Dolphin for x86_64
    runs-on: ubuntu-latest  # Ensures it's a 64-bit machine

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Cache submodules to speed up future builds
      - name: Cache Git submodules
        uses: actions/cache@v4
        with:
          path: |
            .git/modules
            .git/submodules
          key: ${{ runner.os }}-dolphin-submodules-${{ hashFiles('**/.gitmodules') }}
          restore-keys: |
            ${{ runner.os }}-dolphin-submodules-

      - name: Initialize and update submodules
        run: |
          git -c submodule."Externals/Qt".update=none \
          -c submodule."Externals/FFmpeg-bin".update=none \
          -c submodule."Externals/libadrenotools".update=none \
          submodule update --init --recursive \
          && git pull --recurse-submodules

      - name: Docker for Arch
        run: |
          docker pull archlinux:base-devel
          docker run --rm \
            -v $PWD:/workspace \
            -w /workspace \
            archlinux:base-devel bash -c "

              # Update and install necessary packages
              pacman -Syu --noconfirm && pacman -S --noconfirm \
                cmake ninja ffmpeg libevdev libxrandr libxi pango cairo qt6-base qt6-svg bluez alsa-lib pulseaudio mesa clang &&

              # Create build and output directories
              mkdir -p build out && 
              build_path='./build'
              out_path='./out'
              
              NUM_CPUS=\$(nproc)
              MAX_CORES=4  # Set a max number of cores to avoid overloading the system
              CORES_TO_USE=\$((NUM_CPUS < MAX_CORES ? NUM_CPUS : MAX_CORES))

              echo \"Number of CPUs: \$NUM_CPUS\"
              echo \"Using \$CORES_TO_USE cores for build\"
              
              # Run cmake configuration
              cmake -S . -B \"$build_path\" \
                -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_INSTALL_PREFIX=\"$out_path\" \
                -DCMAKE_CXX_FLAGS=-march=x86-64 \
                -DCMAKE_C_FLAGS=-march=x86-64 \
                -DCMAKE_C_COMPILER=clang \
                -DCMAKE_CXX_COMPILER=clang++ \
                -DENABLE_ANALYTICS=OFF \
                -DENABLE_AUTOUPDATE=OFF \
                -DENABLE_BLUEZ=OFF \
                -DENABLE_TESTS=OFF \
                -DLINUX_LOCAL_DEV=ON \
                -DUSE_DISCORD_PRESENCE=OFF \
                -DUSE_RETRO_ACHIEVEMENTS=OFF \
                -DUSE_SYSTEM_LIBS=OFF \
                -GNinja

              # Build with Ninja
              ninja -C \"$build_path\" -j \$CORES_TO_USE && ninja -C \"$build_path\" install

              # Mark the build as portable
              touch \"$out_path/bin/portable.txt\"

              # Fix directory case sensitivity for Dolphin
              mv \"$out_path/share/dolphin-emu\" \"$out_path\"
              mv \"$out_path/dolphin-emu/sys\" \"$out_path/dolphin-emu/Sys\" # Case sensitivity fix for installation
              mv \"$out_path/bin\"/* \"$out_path/dolphin-emu/\"
              rmdir \"$out_path/bin\"
            "

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: dolphin-artifact
          path: ./out/
